#include <gtest/gtest.h>

#include "protocol.h"

#include <array>

TEST(protocol, protocol_check)
{
    EXPECT_EQ(MIDI_NOTES_IN_OCTAVE, 12);
    EXPECT_EQ(MIDI_CHANNELS_MAX_COUNT, 16);
    EXPECT_EQ(MIDI_CONTROLLERS_MAX_COUNT, 128);

    EXPECT_EQ(MIDI_MASK_NEW_MESSAGE_BYTE, 0x80);
    EXPECT_EQ(MIDI_MASK_DATA, 0x7F);

    EXPECT_EQ(MIDI_VLV_MAX_SIZE, 4);
    EXPECT_EQ(MIDI_VLV_BYTE_SIZE_IN_BITS, 7);
    EXPECT_EQ(MIDI_VLV_MSB_BIT_START, 21);
    EXPECT_EQ(MIDI_VLV_GET_BIT_SHIFT_FROM_COUNTER(0), MIDI_VLV_MSB_BIT_START - (MIDI_VLV_BYTE_SIZE_IN_BITS * 0));
    EXPECT_EQ(MIDI_VLV_GET_BIT_SHIFT_FROM_COUNTER(1), MIDI_VLV_MSB_BIT_START - (MIDI_VLV_BYTE_SIZE_IN_BITS * 1));
    EXPECT_EQ(MIDI_VLV_GET_BIT_SHIFT_FROM_COUNTER(2), MIDI_VLV_MSB_BIT_START - (MIDI_VLV_BYTE_SIZE_IN_BITS * 2));
    EXPECT_EQ(MIDI_VLV_GET_BIT_SHIFT_FROM_COUNTER(3), MIDI_VLV_MSB_BIT_START - (MIDI_VLV_BYTE_SIZE_IN_BITS * 3));

    EXPECT_EQ(MIDI_VLV_EXTRACT_BYTE_AT_INDEX(0xAA, 3), 0x2A);

    EXPECT_EQ(MTHD_MARKER_SIZE, 4);
    EXPECT_EQ(MTRK_MARKER_SIZE, 4);

    EXPECT_STREQ(mthd_header_reference, "MThd");
    EXPECT_STREQ(mtrk_header_reference, "MTrk");

    EXPECT_EQ(sizeof(kNotesStr) / sizeof(char *), MIDI_TOTAL_MAPPED_OCTAVES * MIDI_NOTES_IN_OCTAVE);
    EXPECT_EQ(sizeof(kNotesFreq) / sizeof(float), MIDI_TOTAL_MAPPED_OCTAVES * MIDI_NOTES_IN_OCTAVE);

    EXPECT_EQ(sizeof(midi_status_e), 1);
    EXPECT_EQ(sizeof(midi_status_system_e), 1);
    EXPECT_EQ(sizeof(midi_meta_event_e), 1);
    EXPECT_EQ(sizeof(midi_cmd_t), 1);
}

TEST(protocol, MIDI_CHECK_NEW_MESSAGE)
{
    EXPECT_TRUE(MIDI_CHECK_NEW_MESSAGE(0xFF));
    EXPECT_TRUE(MIDI_CHECK_NEW_MESSAGE(0x80));
    EXPECT_TRUE(MIDI_CHECK_NEW_MESSAGE(0x81));
    EXPECT_FALSE(MIDI_CHECK_NEW_MESSAGE(0x7F));
    EXPECT_FALSE(MIDI_CHECK_NEW_MESSAGE(0x01));
    EXPECT_FALSE(MIDI_CHECK_NEW_MESSAGE(0x00));
}

TEST(protocol, MIDI_CHECK_DATA)
{
    EXPECT_FALSE(MIDI_CHECK_DATA(0xFF));
    EXPECT_FALSE(MIDI_CHECK_DATA(0x80));
    EXPECT_FALSE(MIDI_CHECK_DATA(0x81));
    EXPECT_TRUE(MIDI_CHECK_DATA(0x7F));
    EXPECT_TRUE(MIDI_CHECK_DATA(0x01));
    EXPECT_TRUE(MIDI_CHECK_DATA(0x00));
}

TEST(protocol, midi_cmd_bit_fields)
{
    midi_cmd_t cmd = {0};
    cmd.raw = (0x95 & MIDI_MASK_DATA);
    EXPECT_EQ(cmd.status, MIDI_STATUS_NOTE_ON);
    EXPECT_EQ(cmd.channel, 5);

    cmd.raw = (0xF2 & MIDI_MASK_DATA);
    EXPECT_EQ(cmd.status, MIDI_STATUS_SYSTEM);
    EXPECT_EQ(cmd.system, MIDI_STATUS_SYSTEM_SONG_POSITION);
}

TEST(protocol, midi_cmd)
{
    midi_cmd_t cmd;
    cmd.status = MIDI_STATUS_NOTE_ON;
    cmd.channel = 3;

    EXPECT_EQ(cmd.status, MIDI_STATUS_NOTE_ON);
    EXPECT_EQ(cmd.channel, 3);
    EXPECT_EQ(cmd.system, 3);
}

TEST(protocol, midi_cmd_FF)
{
    midi_cmd_t cmd;
    cmd.raw = 0xFF;

    EXPECT_TRUE(cmd.new_msg);
    EXPECT_EQ(cmd.status, MIDI_STATUS_SYSTEM);
    EXPECT_EQ(cmd.channel, 0x0F);
    EXPECT_EQ(cmd.system, 0x0F);
}

TEST(protocol, midi_status)
{
    EXPECT_EQ(MIDI_STATUS_NOTE_OFF, 0);
    EXPECT_EQ(MIDI_STATUS_NOTE_ON, 1);
    EXPECT_EQ(MIDI_STATUS_KEY_PRESSURE, 2);
    EXPECT_EQ(MIDI_STATUS_CONTROLLER_CHANGE, 3);
    EXPECT_EQ(MIDI_STATUS_PROGRAM_CHANGE, 4);
    EXPECT_EQ(MIDI_STATUS_CHANNEL_PRESSURE, 5);
    EXPECT_EQ(MIDI_STATUS_PITCH_BEND, 6);
    EXPECT_EQ(MIDI_STATUS_SYSTEM, 7);
}

TEST(protocol, midi_status_system)
{
    EXPECT_EQ(MIDI_STATUS_SYSTEM_EXCLUSIVE, 0);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_RESERVED_1, 1);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_SONG_POSITION, 2);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_SONG_SELECT, 3);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_RESERVED_4, 4);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_UNOFFICIAL_BUS_SELECT, 5);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_TUNE_REQUEST, 6);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_END_OF_SYSEX, 7);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_TIMING_TICK, 8);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_RESERVED_9, 9);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_START_SONG, 10);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_CONTINUE_SONG, 11);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_STOP_SONG, 12);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_RESERVED_13, 13);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_ACTIVE_SENSING, 14);
    EXPECT_EQ(MIDI_STATUS_SYSTEM_RESET_OR_META, 15);
}

TEST(protocol, midi_meta_event)
{
    EXPECT_EQ(MIDI_META_EVENT_SEQUENCE_NUMBER, 0x00);
    EXPECT_EQ(MIDI_META_EVENT_TEXT, 0x01);
    EXPECT_EQ(MIDI_META_EVENT_COPYRIGHT, 0x02);
    EXPECT_EQ(MIDI_META_EVENT_TRACK_NAME, 0x03);
    EXPECT_EQ(MIDI_META_EVENT_INSTRUMENT_NAME, 0x04);
    EXPECT_EQ(MIDI_META_EVENT_LYRIC_TEXT, 0x05);
    EXPECT_EQ(MIDI_META_EVENT_TEXT_MARKER, 0x06);
    EXPECT_EQ(MIDI_META_EVENT_CUE_POINT, 0x07);
    EXPECT_EQ(MIDI_META_EVENT_PROGRAM_PATCH_NAME, 0x08);
    EXPECT_EQ(MIDI_META_EVENT_DEVICE_PORT_NAME, 0x09);
    EXPECT_EQ(MIDI_META_EVENT_MIDI_CHANNEL, 0x20);
    EXPECT_EQ(MIDI_META_EVENT_MIDI_PORT, 0x21);
    EXPECT_EQ(MIDI_META_EVENT_TRACK_END, 0x2F);
    EXPECT_EQ(MIDI_META_EVENT_M_LIVE_TAG, 0x4B);
    EXPECT_EQ(MIDI_META_EVENT_TEMPO, 0x51);
    EXPECT_EQ(MIDI_META_EVENT_SMPTE_OFFSET, 0x54);
    EXPECT_EQ(MIDI_META_EVENT_TIME_SIGNATURE, 0x58);
    EXPECT_EQ(MIDI_META_EVENT_KEY_SIGNATURE, 0x59);
    EXPECT_EQ(MIDI_META_EVENT_PROPRIETARY_EVENT, 0x7F);
}
